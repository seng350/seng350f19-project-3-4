
1 - Front end connected to back end
2 - Travis-CI contains reasonable test suite
3 - Front end and back end can handle data that's manually added to the system, but not regular data input 
(courses possibly, calendar view, gradable items, users, algorithm possibly)
4 -  We should be spending a lot of time on this milestone, if everything goes too smoothly we can do more work
5 - We will be using Jest as the testing framework becuase it is becoming more popular than Mocha and is recommended for beginners: https://blog.bitsrc.io/top-javascript-testing-frameworks-in-demand-for-2019-90c76e7777e9.

Milestone
Marking Guide

    code compiles
    code conventions/CI from above (commented, code style, design principles)
    working demo
    clear explanation of what user stories were satisfied in this iteration
    design as implemented follows design doc, or change rationale is present in README
    async is async when necessary
    TSLint does not complain
    test suite present/part of CI
    test coverage reasonable and meaningful
    
3. Code iteration 1
Deliverables

    Commit latest, working code to Github tagged "sprint1". Ensure there is a build process documented in the Readme file.
    Static analysis report
    Passing Travis builds
    Code coverage report.
    Readme file explaining functionality, what user stories were addressed, what design problems were faced (and how design changed).

Marking Guide

    Code compiles (no marks otherwise)
    No huge problems reported by linters and analyses
    Test coverage and quality is good
    Software principles like good naming, comments, high cohesion are followed.
