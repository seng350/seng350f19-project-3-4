{"version":3,"file":"UserModel.js","sourceRoot":"","sources":["../../src/models/UserModel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAwC;AAExC,sCAAyC;AAEzC;IAA+B,6BAAS;IAEpC;;;;;;;;OAQG;IACH,mBAAY,MAAc;QAA1B,YAEI,kBAAM,MAAM,CAAC,SAKhB;QAJG,mHAAmH;QAGnH,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;IACzB,CAAC;IAEM,wCAAoB,GAA3B,UAA4B,WAAmB;IAG/C,CAAC;IACM,wCAAoB,GAA3B,UAA4B,iBAAyB;IAGrD,CAAC;IACM,4BAAQ,GAAf,UAAgB,KAAa;IAG7B,CAAC;IACM,6BAAS,GAAhB,UAAiB,MAAmB;IAGpC,CAAC;IACM,gCAAY,GAAnB,UAAoB,UAAkB;QAElC,2EAA2E;IAC/E,CAAC;IACK,kCAAc,GAApB,UAAqB,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAU;;;;;4BAErE,qBAAM,QAAQ,CAAC,OAAO,EAAE;6BAC9B,IAAI,CAAC,UAAC,EAAE;4BACL,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;4BAC3B,OAAO,EAAG,CAAC,UAAU,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAC,WAAW,EAAC,EAAE,EAAC,CAAC,CAAC,OAAO,EAAE,CAAC;wBAC3E,CAAC,CAAC;6BACD,KAAK,CAAC,UAAC,GAAG;4BACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;wBAC7B,CAAC,CAAC,EAAA;4BAPF,sBAAO,SAOL,EAAA;;;;KACL;IACM,wCAAoB,GAA3B;IAGA,CAAC;IACM,8BAAU,GAAjB;IAGA,CAAC;IAEL,gBAAC;AAAD,CAAC,AA5DD,CAA+B,qBAAS,GA4DvC;AA5DY,8BAAS","sourcesContent":["import { BaseModel } from \"./BaseModel\";\r\nimport { CourseModel } from \"./CourseModel\";\r\nimport DbClient = require(\"../DbClient\");\r\nimport {Request, Response, NextFunction} from \"express\";\r\nexport class UserModel extends BaseModel {\r\n    private readonly userID : Number;\r\n    /* User Model Fields:\r\n    \t○ StudentID (auto-generated, auto-increment, int)\r\n\t\t○ Email (string, unique)\r\n\t\t○ StudentName (string, unique?)\r\n\t\t○ NotificationLevel\r\n\t\t○ AlgorithmAccuracy (float: 0.5f - 2f)\r\n\t\t○ Courses[]\r\n        IsAdmin (bool)\r\n     */\r\n    constructor(userID: Number)\r\n    {\r\n        super(\"User\");\r\n        //We can test here the id of the user submitting the request - if it's an admin user we can allow for admin actions\r\n\r\n\r\n        this.userID = userID;\r\n    }\r\n\r\n    public SetAlgorithmAccuracy(algAccuracy: Number)\r\n    {\r\n\r\n    }\r\n    public SetNotificationLevel(notificationLevel: Number)\r\n    {\r\n\r\n    }\r\n    public SetEmail(email: string)\r\n    {\r\n\r\n    }\r\n    public AddCourse(course: CourseModel)\r\n    {\r\n\r\n    }\r\n    public RemoveCourse(courseName: string)\r\n    {\r\n        //The course should be uniquely identifiable by the user id and course name\r\n    }\r\n    async GetUserDetails(req: Request, res: Response, next: NextFunction, id: Number)\r\n    {\r\n        return await DbClient.connect()\r\n        .then((db)=>{\r\n            console.log(\"Id is \" + id);\r\n            return db!.collection(this.tableName).find({\"StudentID\":id}).toArray();\r\n        })\r\n        .catch((err) => {\r\n            console.log(err.message);\r\n        })\r\n    }\r\n    public GetAlgorithmAccuracy()\r\n    {\r\n\r\n    }\r\n    public GetCourses()\r\n    {\r\n\r\n    }\r\n\r\n}"]}