{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;;;AACA,4DAAqC;AACrC,gEAAyC;AACzC,oDAA8B;AAC9B,kDAA4B;AAC5B,8CAAwB;AACxB,8DAAwC;AACxC,wCAA4C;AAC5C,kDAAiD;AACjD,sDAAmD;AAEnD;;;;GAIG;AACH;IAoBI;;;;;OAKG;IACH;QACI,8BAA8B;QAC9B,IAAI,CAAC,GAAG,GAAG,iBAAO,EAAE,CAAC;QAErB,uBAAuB;QACvB,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,YAAY;QACZ,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IA/BD;;OAEG;IAEH;;;;;;;OAOG;IACW,gBAAS,GAAvB;QACI,OAAO,IAAI,MAAM,EAAE,CAAC;IACxB,CAAC;IAmBD;;;;;OAKG;IACI,uBAAM,GAAb;QACI,kBAAkB;QAClB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAE9D,eAAe;QACf,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAEnC,cAAc;QACd,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAE5B,wBAAwB;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAEhC,2BAA2B;QAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC,CAAC,CAAC;QAEJ,gCAAgC;QAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,uBAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAE/C,yCAAyC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAS,GAAQ,EAAE,GAAoB,EAAE,GAAqB,EAAE,IAA0B;YACnG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YACjB,IAAI,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,sBAAY,EAAE,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACK,uBAAM,GAAd;QACI,IAAI,MAAsB,CAAC;QAC3B,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;QAE1B,kBAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1B,uBAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1B,2BAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC5B,uBAAuB;QACvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEzB,CAAC;IAEL,aAAC;AAAD,CAAC,AA9FD,IA8FC;AA9FY,wBAAM","sourcesContent":["\nimport bodyParser from \"body-parser\";\nimport cookieParser from \"cookie-parser\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport path from \"path\";\nimport errorHandler from \"errorhandler\";\nimport { IndexRoute } from \"./routes/index\";\nimport { HeroRouter } from \"./routes/heroRouter\";\nimport {SessionRoute} from \"./routes/SessionRoute\";\n\n/**\n * The server.\n *\n * @class Server\n */\nexport class Server {\n\n    public app: express.Application;\n\n    /*\n        Added a test comment\n     */\n\n    /**\n     * Bootstrap the application.\n     *\n     * @class Server\n     * @method bootstrap\n     * @static\n     * @return {ng.auto.IInjectorService} Returns the newly created injector for this app.\n     */\n    public static bootstrap(): Server {\n        return new Server();\n    }\n\n    /**\n     * Constructor.\n     *\n     * @class Server\n     * @constructor\n     */\n    constructor() {\n        //create expressjs application\n        this.app = express();\n\n        //configure application\n        this.config();\n\n        //add routes\n        this.routes();\n    }\n\n    /**\n     * Configure application\n     *\n     * @class Server\n     * @method config\n     */\n    public config() {\n        //add static paths\n        this.app.use(express.static(path.join(__dirname, \"/public\")));\n\n        //configure pug\n        this.app.set(\"views\", path.join(__dirname, \"/../views\"));\n        this.app.set(\"view engine\", \"pug\");\n\n        //mount logger\n        this.app.use(logger(\"dev\"));\n\n        //mount json form parser\n        this.app.use(bodyParser.json());\n\n        //mount query string parser\n        this.app.use(bodyParser.urlencoded({\n            extended: true\n        }));\n\n        //mount cookie parser middleware\n        this.app.use(cookieParser(\"SECRET_GOES_HERE\"));\n\n        // catch 404 and forward to error handler\n        this.app.use(function(err: any, req: express.Request, res: express.Response, next: express.NextFunction) {\n            err.status = 404;\n            next(err);\n        });\n\n        //error handling\n        this.app.use(errorHandler());\n    }\n\n    /**\n     * Create and return Router.\n     *\n     * @class Server\n     * @method routes\n     * @return void\n     */\n    private routes() {\n        let router: express.Router;\n        router = express.Router();\n\n        IndexRoute.create(router);\n        HeroRouter.create(router);\n        SessionRoute.create(router);\n        //use router middleware\n        this.app.use(router);\n\n    }\n\n}"]}